import UIKit

var str = "Hello, playground"

var num = 2864434397

var hexNum = String(format:"%02X", num) as String
var binNum = String(num, radix : 2)

var ANDValue = 1099511366143
var hexAndValue = String(ANDValue, radix:16, uppercase : true)
var binANDValue = String(ANDValue, radix:2)

var a = 0xAABBCCDD
var b = 0xFFFC01FF

var c = a & b

var d = c >> 8

var ans = String(d, radix : 16)

/*
 Clear the 20th to 27th bits (count the bits from left to right) of the parameter "param" and shift it by 8 bits to the left, and then fill the right most bits with 0. For example, the input parameter 0xaabbccdd should generate a return value of 0xbbc00d00. You can assume that the size of long is 4 bytes. The code for this function should be entirely written in x86 assembly. You should not use inline assembly, (i.e., do not use asm(...)). To investigate the assembly code generated by the compiler, you can use the tool objdump -d <___.o> to disassemble an object file. The object files reside in the /compile directory within the main Xinu directory. You can also see some of the *.S files in the /sys directory for reference.
 */
